{"version":3,"sources":["data/data.js","components/Header.js","components/Item.js","components/Cart.js","components/Checkout.js","components/OrderComplete.js","App.js","serviceWorker.js","index.js"],"names":["cartData","sku","unitPrice","name","quantity","Header","Item","props","className","src","alt","item","Cart","arr","sum","renderedItems","this","cart","map","key","subTotal","getSubtotal","to","type","Component","Checkout","state","formData","e","setState","preventDefault","action","onSubmit","handleSubmit","placeholder","OrderComplete","App","exact","path","component","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7a8ab5b8.chunk.js","sourcesContent":["const cartData = [\r\n  { sku: 38094374, unitPrice: 24.0, name: \"Red Shirt\", quantity: 2 },\r\n  { sku: 38094375, unitPrice: 24.0, name: \"Blue Shirt\", quantity: 1 },\r\n  { sku: 38094321, unitPrice: 12.0, name: \"Blue socks\", quantity: 4 }\r\n];\r\nexport default cartData;","import React from 'react';\r\n\r\nfunction Header(){\r\n  return(\r\n    <header><h1>Assemble Store</h1></header>\r\n  )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nfunction Item(props){\r\n  return (\r\n    <div className=\"item\">\r\n      <div className=\"item-group\">\r\n      <img src=\"http://placekitten.com/150/150\" alt=\"\"/>\r\n      <div>\r\n        <p className=\"item-name\">{props.item.name}</p>\r\n        <p className=\"item-sku\">SKU: {props.item.sku}</p>\r\n      </div>\r\n      </div>\r\n      \r\n      <div className=\"item-quantity\">{props.item.quantity}</div>\r\n      <div className=\"item-price\">{props.item.unitPrice}</div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Item;","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// Components\r\nimport Item from \"./Item\";\r\n\r\n//TODO: Style\r\n\r\nclass Cart extends Component {\r\n  getSubtotal(arr) {\r\n    let sum = 0;\r\n    for (let item of arr) {\r\n      sum += item.unitPrice * item.quantity;\r\n    }\r\n    return sum;\r\n  }\r\n\r\n  render() {\r\n    const renderedItems = this.props.cart.map(item => (\r\n      <Item item={item} key={item.sku} />\r\n    ));\r\n    const subTotal = this.getSubtotal(this.props.cart);\r\n    return (\r\n      <div className=\"cart\">\r\n        <div className=\"cart-header\">\r\n          <h2>Your Cart</h2>\r\n          <p>QUANTITY</p>\r\n          <p>PRICE</p>\r\n        </div>\r\n        {renderedItems}\r\n\r\n        <div className=\"subtotal\">\r\n          <p>Subtotal</p>\r\n          <p>{subTotal}</p>\r\n        </div>\r\n        <Link to=\"/checkout\">\r\n          <button type=\"button\">PLACE ORDER</button>\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Cart;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// Components\r\n\r\n//TODO: Add validation\r\n\r\nclass Checkout extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      formData: {},\r\n    }\r\n  }\r\n\r\n  handleChange(e){\r\n    // handleChange will be called on every input\r\n    // It will read the input's unique identifies (id or data- attribute)\r\n    // and use that to set a property with the same name on the state object\r\n    // This way we'll have only one function which will handle the change on all the form-fields.\r\n    this.setState({\r\n      \r\n    })\r\n  }\r\n\r\n  handleSubmit(e) {\r\n    e.preventDefault();\r\n    // TODO: send the state object containing all the relevant data to the appropriate API\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"checkout\">\r\n        <h2>Check Out</h2>\r\n        <form className=\"form-payment\" action=\"\" onSubmit={this.handleSubmit}>\r\n          <fieldset className=\"payment-info\">\r\n            <legend>Payment Information</legend>\r\n            <label>\r\n              Name on Card\r\n              <input type=\"text\" placeholder=\"Name on Card\" />\r\n            </label>\r\n            <label>\r\n              Card Number\r\n              <input type=\"number\" placeholder=\"XXXX XXXX XXXX XXXX\" />\r\n            </label>\r\n\r\n            {/* TODO: Properly format the field*/}\r\n            <label>\r\n              Expiration Date\r\n              <input type=\"\" placeholder=\"MM\" />\r\n            </label>\r\n\r\n            <label>\r\n              CVV\r\n              <input type=\"number\" placeholder=\"CVV\" />\r\n            </label>\r\n          </fieldset>\r\n\r\n          <fieldset className=\"shipping-address\">\r\n            <legend>Shipping Address</legend>\r\n\r\n            <label>\r\n              Name\r\n              <input type=\"text\" placeholder=\"Full name\" />\r\n            </label>\r\n            <label>\r\n              Address\r\n              <input type=\"text\" placeholder=\"Address\" />\r\n            </label>\r\n            <label>\r\n              Apt/suite/etc\r\n              <input type=\"text\" placeholder=\"Apt/suite/etc\" />\r\n            </label>\r\n            <label>\r\n              City\r\n              <input type=\"text\" placeholder=\"City\" />\r\n            </label>\r\n            {/* TODO: Add the option for all relevant countries*/}\r\n            <label>\r\n              Country\r\n              <input type=\"text\" placeholder=\"Country\" />\r\n            </label>\r\n            {/* TODO: Add the option for all relevant states*/}\r\n            <label>\r\n              State\r\n              <input type=\"text\" placeholder=\"State\" />\r\n            </label>\r\n            {/* TODO: Add a check for valid ZIP code*/}\r\n            <label>\r\n              ZIP Code\r\n              <input type=\"number\" placeholder=\"ZIP Code\" />\r\n            </label>\r\n\r\n            <label>\r\n              <input type=\"checkbox\" />\r\n              Billing address same as shipping\r\n            </label>\r\n          </fieldset>\r\n        </form>\r\n\r\n        <Link to=\"/order-complete\">\r\n          <button type=\"button\">CHECK OUT</button>\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Checkout;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass OrderComplete extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Order Complete</h2>\r\n        <p>Hooray! Way to order those products.</p>\r\n\r\n        <Link to=\"/\">\r\n          <button type=\"button\">GO HOME</button>\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OrderComplete;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport cartData from \"./data/data\";\n\n//Components\nimport Header from \"./components/Header\";\nimport Cart from \"./components/Cart\";\nimport Checkout from \"./components/Checkout\";\nimport OrderComplete from \"./components/OrderComplete\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      cart: cartData\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n\n        <Router>\n          {/* <Route exact path=\"/\" component={} /> */}\n          <Route exact path=\"/checkout\" component={Checkout} />\n          <Route\n            exact\n            path=\"/cart\"\n            render={props => <Cart {...props} cart={this.state.cart} />}\n          />\n          <Route exact path=\"/order-complete\" component={OrderComplete} />\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}